PREFIX nn:   <http://www.swows.org/xml/no-namespace#>
PREFIX svg:  <http://www.w3.org/2000/svg#>
PREFIX html: <http://www.w3.org/1999/xhtml#>
PREFIX p: <http://dev.w3.org/html5/2dcontext/#>
PREFIX sf: <http://www.swows.org/function#>
PREFIX swi: <http://www.swows.org/instance#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX : <http://www.swows.org/svg2canvas#>
PREFIX xsvg: <http://www.swows.org/svg#>
PREFIX xml: <http://www.swows.org/xml#>

CONSTRUCT {

  ?pathData xsvg:first-command ?firstCommand .

  ?movetoOrLinetoCommand
    a ?movetoOrLinetoType ;
    a ?currRelOrAbsType ;
    xsvg:x ?movetoOrLinetoX ;
    xsvg:y ?movetoOrLinetoY ;
    xsvg:next-command ?movetoOrLinetoNext .

  ?lineToCommand
    a xsvg:LinetoCommand ;
    a ?currRelOrAbsType ;
    xsvg:x ?linetoX ;
    xsvg:y ?linetoY ;
    xsvg:next-command ?linetoNext .

} WHERE {

  ?g_xa
    nn:id "xa" ;
    xml:hasChild ?path .

  ?path
    a svg:path ;
    nn:d ?pathData .

  BIND(
    sf:analyze-string(
      ?pathData,
      "([MmZzLlHhVvCcSsQqTtAa])(?:\\s*([+-]?(?:[0-9]*[.][0-9]*|[0-9]+)(?:[Ee][+-]?[0-9]+)?(?:(?:\\s+,?\\s*|,\\s*)[+-]?(?:[0-9]*[.][0-9]*|[0-9]+)(?:[Ee][+-]?[0-9]+)?)*))?"
    ) AS ?pathData_parsed ) .

  GRAPH ?pathData_parsed {
    swi:GraphRoot sf:first-match ?first_command_match .
    ?first_command_match sf:next-match* ?curr_command_match .
    ?curr_command_match sf:first-group ?group1 .
    ?group1 sf:string ?command_type .
    BIND( UCASE(?command_type) AS ?u_command_type ) .
    BIND( IF( ?u_command_type = ?command_type, xsvg:AbsoluteCommand, xsvg:RelativeCommand ) AS ?currRelOrAbsType) .
    OPTIONAL {
      ?group1 sf:next-group ?group2 .
      ?group2 sf:string ?command_args .
      BIND(
        sf:analyze-string(
          ?command_args,
          "[+-]?(?:[0-9]*[.][0-9]*|[0-9]+)(?:[Ee][+-]?[0-9]+)?"
        ) AS ?command_args_parsed ) .
      GRAPH ?command_args_parsed {
        OPTIONAL {
          FILTER(?u_command_type = 'M' || ?u_command_type = 'L') .
          BIND( IF( ?u_command_type = 'M', xsvg:MovetoCommand, xsvg:LinetoCommand ) AS ?movetoOrLinetoType) .
          swi:GraphRoot sf:first-match ?pair1_x .
          ?pair1_x
            sf:string ?MLX ;
            sf:next-match ?pair1_y .
          ?pair1_y sf:string ?MLY .
          BIND(xsd:decimal(?MLX) AS ?movetoOrLinetoX) .
          BIND(xsd:decimal(?MLY) AS ?movetoOrLinetoY) .
          BIND( URI( CONCAT( STR(:command_), MD5(STR(?curr_command_match)) ) ) AS ?movetoOrLinetoCommand) .
          OPTIONAL {
            FILTER NOT EXISTS {?pair1_y sf:next-match ?pair2_x} .
            ?command_match sf:next-match ?next_command_match .
            BIND( URI( CONCAT( STR(:command_), MD5(STR(?next_command_match)) ) ) AS ?movetoOrLinetoNext) .
          } .
          OPTIONAL {
            ?pair1_y sf:next-match ?pair2_x .
            BIND( URI( CONCAT( STR(:command_), MD5(CONCAT( STR(?curr_command_match), STR(?pair2_x) )) ) ) AS ?movetoOrLinetoNext) .
            ?pair2_x (sf:next-match/sf:next-match)* ?currPair_x .
            ?currPair_x
              sf:string ?LX ;
              sf:next-match ?currPair_y .
            ?currPair_y sf:string ?LY .
            BIND(xsd:decimal(?LX) AS ?lineToX) .
            BIND(xsd:decimal(?LY) AS ?lineToY) .
            BIND( URI( CONCAT( STR(:command_), MD5(CONCAT( STR(?curr_command_match), STR(?currPair_x) )) ) ) AS ?linetoCommand) .
            OPTIONAL {
              ?currPair_y sf:next-match ?nextPair_x .
              BIND( URI( CONCAT( STR(:command_), MD5(CONCAT( STR(?curr_command_match), STR(?nextPair_x) )) ) ) AS ?linetoNext) .
            } .
            OPTIONAL {
              FILTER NOT EXISTS {?currPair_y sf:next-match ?nextPair_x} .
              ?command_match sf:next-match ?next_command_match .
              BIND( URI( CONCAT( STR(:command_), MD5(STR(?next_command_match)) ) ) AS ?linetoNext) .
            } .
          } .
        } .
      }
    } .
  } .

}

